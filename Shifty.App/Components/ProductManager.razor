@namespace Components
@using System.ComponentModel.DataAnnotations
@using MudExtensions
@using Shifty.App.Services
@using Shifty.Api.Generated.AnalogCoreV1
@using Shifty.Api.Generated.AnalogCoreV2
@using Shared
@using LanguageExt.UnsafeValueAccess
@using Components
@using Shifty.App.DomainModels
@using System.Collections.ObjectModel
@inject ISnackbar Snackbar
@inject IProductService ProductService
@inject IJSRuntime JSRuntime
@inject IMenuItemService MenuItemService

<style>
    .mud-table-cell {
        padding: 0.5em 0.75em !important;
    }
</style>
<MudPaper Elevation="15" Style="margin: 2em; border-radius: 5px;">
    @if (_loading)
    {
        <MudContainer Style="width: 100%; display: flex;">
            <LoadingIndicator Height="400px" />
        </MudContainer>
    }
    <MudDataGrid
        @ref="_dataGrid"
        T="Product"
        Items="@_products"
        EditMode="DataGridEditMode.Form"
        ReadOnly="false"
        StartedEditingItem="@StartedEditingItem"
        CanceledEditingItem="@CanceledEditingItem"
        CommittedItemChanges="@CommittedItemChanges"
        EditTrigger="DataGridEditTrigger.Manual"
        QuickFilter="e => _showNonvisible || e.Visible"
        RowStyleFunc="@RowStyleFunc"
        FixedHeader="true"
        Height="calc(100vh - 250px)"
        Dense="true"
        SortMode="MudBlazor.SortMode.None">
        <Columns>
            <TemplateColumn Title="Edit">
                <CellTemplate>
                    <MudIconButton
                        Size="@Size.Medium"
                        Icon="@Icons.Material.Outlined.Edit"
                        Color="Color.Primary"
                        OnClick="@context.Actions.StartEditingItemAsync" />
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.Visible" Title="" InitialDirection="SortDirection.Descending">
                <CellTemplate>
                    @{
                        if (context.Item.Visible)
                        {
                            <MudIcon Size="@Size.Small" Color="Color.Dark"
                                Icon="@Icons.Material.Filled.Visibility" />
                        }
                        else
                        {
                            <MudIcon Size="@Size.Small" Style="@($"color:{Colors.Grey.Default};")"
                                Icon="@Icons.Material.Filled.VisibilityOff" />
                        }
                    }
                </CellTemplate>
                <EditTemplate>
                    <MudSwitch id="first-edit-element" Label="Visible" Color="Color.Primary" @bind-Checked="context.Item.Visible" />
                </EditTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.Id" Title="Id" IsEditable="false" />
            <PropertyColumn Property="x => x.Name" Title="Name" IsEditable="true" />
            <PropertyColumn Property="x => x.NumberOfTickets" Title="Tickets" IsEditable="true" />
            <PropertyColumn Property="x => x.Price" Title="Price" IsEditable="true" />
            <PropertyColumn Property='x => string.Join(", ", x.AllowedUserGroups.Select(e => e.ToString()))'
                Title="User groups" IsEditable="true">
                <EditTemplate>
                    <MudText Typo="Typo.subtitle1">Visible to:</MudText>
                    @foreach (var group in Enum.GetValues<UserGroup>())
                    {
                        <MudCheckBox Dense="true" Color="Color.Primary" @bind-Checked="UserGroupDict[group]" Value="@group">
                            @group</MudCheckBox>
                    }
                </EditTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.IsPerk" Title="Perk?" IsEditable="false">
                <CellTemplate>
                    @{
                        if (context.Item.IsPerk)
                        {
                            <MudIcon Style="color:gold;" Icon="@Icons.Material.Filled.Star" Title="IsPerk" />
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.StarOutline" Title="IsPerk" />
                        }
                    }
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.Description" Title="Description" IsEditable="true" />
            <PropertyColumn Property="x => x.EligibleMenuItems" Title="Eligible menu items" IsEditable="true" Hidden>
                <EditTemplate>
                    <MudComboBox
                        T="MenuItem" 
                        Label="Eligible menu items"
                        MultiSelection="true" 
                        Editable="true" 
                        @bind-SelectedValues="context.Item.EligibleMenuItems">
                        @foreach (var mi in _allMenuItems)
                        {
                            <MudComboBoxItem Text="@mi.Name" Value="@mi">@mi.Name</MudComboBoxItem>
                        }
                    </MudComboBox>
                </EditTemplate>
            </PropertyColumn>
        </Columns>
    </MudDataGrid>

    <MudToolBar>
        <MudSpacer />
        <MudButton
            Color="Color.Primary"
            Variant="Variant.Filled"
            EndIcon="@Icons.Material.Outlined.Add"
            OnClick="@AddItemToDataGrid">
                Add Product
        </MudButton>
    </MudToolBar>
</MudPaper>
@code
{
    private MudDataGrid<Product> _dataGrid;
    private IEnumerable<Product> _products = new List<Product>();
    private Dictionary<UserGroup, bool> UserGroupDict = new();
    private IEnumerable<MenuItem> _allMenuItems = new List<MenuItem>();
    
    private void StartedEditingItem(Product item)
    {
        UserGroupDict = new();
        foreach (var group in Enum.GetValues<UserGroup>())
        {
            UserGroupDict.Add(group, item.AllowedUserGroups.Contains(group));
        }
        FocusFirst();
    }

    private bool _loading = true;
    private bool _showNonvisible = true;
    protected override async Task OnInitializedAsync()
    {
        var productsResult = await ProductService.GetProducts();
        productsResult.Match(
            Succ: products => {
                _products = new List<Product>(products);
                StateHasChanged();
            },
            Fail: error => {
                Snackbar.Add(error.Message, Severity.Error);
            }
        );

        var menuItemsResult = await MenuItemService.GetMenuItems();

        menuItemsResult.Match(
            Succ: menuItems => {
                _allMenuItems = menuItems;
            },
            Fail: error => {
                Snackbar.Add(error.Message, Severity.Error);
            }
        );

        _loading = false;
    }

    void CanceledEditingItem(Product item)
    {
        Snackbar.Add("Cancelled product changes", Severity.Info);
    }

    async Task FocusFirst()
    {
        await JSRuntime.InvokeVoidAsync("window.focusElement", "first-edit-element");
    }

    async Task CommittedItemChanges(Product item)
    {
        List<UserGroup> AllowedUserGroups =
                UserGroupDict.Where(e => e.Value)
                             .ToDictionary(kv => kv.Key, kv => kv.Value)
                             .Keys
                             .ToList();
        
        item.AllowedUserGroups = AllowedUserGroups;

        if (item.Id == 0)
        {
            var result = await ProductService.AddProduct(item);

            result.Match(
                Succ: product =>
                {
                    // Succesfully added product
                    Snackbar.Add("Product added", Severity.Success);

                    // Override the created product with the placeholder item
                    _products = _products.Where(p => p.Id != 0)
                                .Append(product);
                    
                    StateHasChanged();
                },
                Fail: error => {
                    Snackbar.Add(error.Message, Severity.Error);
                }
            );
        }
        else
        {
            var result = await ProductService.UpdateProduct(item, item.Id);

            result.Match(
                Succ: product =>
                {
                    Snackbar.Add("Product updated", Severity.Success);
                    _products.FirstOrDefault(p => p.Id == item.Id).IsPerk = product.IsPerk;
                },
                Fail: error =>
                {
                    Snackbar.Add(error.Message, Severity.Warning);
                }
            );
        }
    }

    void AddItemToDataGrid()
    {
        _products = _products.Append(new Product{
            Id = 0,
            Name = "",
            Description = "",
            IsPerk = false,
            NumberOfTickets = 1,
            Price = 0,
            Visible = true,
            AllowedUserGroups = new List<UserGroup>(),
            EligibleMenuItems = new List<MenuItem>(),
        });
        StateHasChanged();
        _dataGrid.SetEditingItemAsync(_products.Last());
    }

    private Func<Product, int, string> RowStyleFunc => (x, i) =>
    {
        if (!x.Visible)
        {
            return "background-color:#ebebeb;font-style:italic;font-color:#8a8686;";
        }
        return "";
    };
}
