@namespace Components
@using System.ComponentModel.DataAnnotations
@using Shifty.App.Services
@using Shifty.Api.Generated.AnalogCoreV1
@using Shifty.Api.Generated.AnalogCoreV2
@using Shared
@using LanguageExt.UnsafeValueAccess
@inject ISnackbar Snackbar
@inject IProductService ProductService


<MudDataGrid
    T="ProductResponse"
    Items="@_products"
    EditMode="DataGridEditMode.Form"
    ReadOnly="false"
    StartedEditingItem="@StartedEditingItem"
    CanceledEditingItem="@CanceledEditingItem"
    CommittedItemChanges="@CommittedItemChanges"
    EditTrigger="DataGridEditTrigger.Manual"
    >
    <Columns>
        <PropertyColumn Property="x => x.Id" Title="Id" IsEditable="false"/>
        <PropertyColumn Property="x => x.Name" Title="Name" IsEditable="true"/>
        <PropertyColumn Property="x => x.Description" Title="Description" IsEditable="true"/>
        <PropertyColumn Property="x => x.Price" Title="Price" IsEditable="true"/>
        <PropertyColumn Property="x => x.IsPerk" Title="IsPerk" IsEditable="true"/>
        <PropertyColumn Property="x => x.NumberOfTickets" Title="NumberOfTickets" IsEditable="true"/>
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync"/>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

<MudToolBar>
    <MudSpacer />
    <MudButton
        Color="Color.Primary"
        Variant="Variant.Filled"
        EndIcon="@Icons.Material.Outlined.Add" 
        OnClick="@AddItem">
            Add Product
        </MudButton>
</MudToolBar>
@code
{
    [Parameter]
    public System.Security.Claims.ClaimsPrincipal User { get; set; }

    private IEnumerable<ProductResponse> _products;

    protected override async Task OnInitializedAsync()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
        
        var result = await ProductService.GetProducts();
        result.Match(
            Succ: products => {
                                  _products = products;
                                  Console.WriteLine(_products.Count());
            },
            Fail: error => {
                Snackbar.Add(error.Message, Severity.Error);
            }
        );
    }
    
    void StartedEditingItem(ProductResponse item)
    {
        Console.WriteLine("Started Editing Item!!");
        var data = System.Text.Json.JsonSerializer.Serialize(item);
        Console.WriteLine(data);
        // _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(ProductResponse item)
    {
        Snackbar.Add("Cancelled product changes", Severity.Warning);
    }

    void CommittedItemChanges(ProductResponse item)
    {
        if (item.Id == 0)
        {
            // log new item
            var result = ProductService.AddProduct(new AddProductRequest{
                Name = item.Name,
                Description = item.Description,
                NumberOfTickets = item.NumberOfTickets,
                Price = item.Price,
                Visible = true,
                AllowedUserGroups = new List<UserGroup>{UserGroup.Customer, UserGroup.Barista, UserGroup.Manager, UserGroup.Board}
            });
        }
        else
        {
            // log previous and new item
            var result = ProductService.UpdateProduct(new UpdateProductRequest{
                Id = item.Id,
                Name = item.Name,
                Description = item.Description,
                NumberOfTickets = item.NumberOfTickets,
                Price = item.Price,
                Visible = true/*,
                IsPerk = item.IsPerk,
                UserGroups = [0, 1, 2, 3, 4]*/
            });

            result.Match(
                Succ: result =>
                {
                    Snackbar.Add("Product updated", Severity.Success);
                },
                Fail: error =>
                {
                    Snackbar.Add(error.Message, Severity.Warning);
                }
            );
        }
    }

    void AddItem()
    {
        _products = _products.Append<ProductResponse>(new ProductResponse{
            Id = 0,
            Name = "",
            Description = "",
            IsPerk = false,
            NumberOfTickets = 1,
            Price = 0
        });

        Snackbar.Add(("Succes: " + _products.Count<ProductResponse>()), Severity.Success);
    }
}