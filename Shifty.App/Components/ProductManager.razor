@namespace Components
@using System.ComponentModel.DataAnnotations
@using Shifty.App.Services
@using Shifty.Api.Generated.AnalogCoreV1
@using Shifty.Api.Generated.AnalogCoreV2
@using Shared
@using LanguageExt.UnsafeValueAccess
@inject ISnackbar Snackbar
@inject IProductService ProductService


<MudDataGrid
    T="ProductResponse"
    Items="@_products"
    EditMode="DataGridEditMode.Form"
    ReadOnly="false"
    StartedEditingItem="@StartedEditingItem"
    CanceledEditingItem="@CanceledEditingItem"
    CommittedItemChanges="@CommittedItemChanges"
    EditTrigger="DataGridEditTrigger.Manual"
    >
    <Columns>
        <PropertyColumn Property="x => x.Id" Title="Id" IsEditable="false"/>
        <PropertyColumn Property="x => x.Name" Title="Name" IsEditable="true"/>
        <PropertyColumn Property="x => x.Description" Title="Description" IsEditable="true"/>
        <PropertyColumn Property="x => x.Price" Title="Price" IsEditable="true"/>
        <PropertyColumn Property="x => x.IsPerk" Title="IsPerk" IsEditable="true"/>
        <PropertyColumn Property="x => x.NumberOfTickets" Title="NumberOfTickets" IsEditable="true"/>
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync"/>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>
@code
{
    [Parameter]
    public System.Security.Claims.ClaimsPrincipal User { get; set; }
    private ICollection<ProductResponse> _products = new List<ProductResponse>();

    protected override async Task OnInitializedAsync()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
        
        _products.Add(new ProductResponse
        {
            Id = 1,
            Description = "My test",
            Name = "Filter Coffee",
            Price = 0,
            IsPerk = true,
            NumberOfTickets = 1
        });
        

    /*var result = await _productService.GetProducts();

        result.Match(
            Succ: products => {
                _products = products;
                _voucherForm.Prefix = User.Claims.Single(el => el.Type.Contains("email")).Value[..3].ToUpper();
            },
            Fail: error => {
                Snackbar.Add(error.Message, Severity.Error);
            }
        );*/
    }
    
    void StartedEditingItem(ProductResponse item)
    {
        Console.WriteLine("Started Editing Item!!");
        var data = System.Text.Json.JsonSerializer.Serialize(item);
        Console.WriteLine(data);
        // _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(ProductResponse item)
    {
        Console.WriteLine("Cancelled Editing Item!!");
        // _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(ProductResponse item)
    {
        Console.WriteLine("Committed Editing Item!!");
        var data = System.Text.Json.JsonSerializer.Serialize(item);
        Console.WriteLine(data);
    // _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }
}