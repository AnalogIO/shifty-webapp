@namespace Components
@using System.ComponentModel.DataAnnotations
@using Shifty.App.Services
@using Shifty.Api.Generated.AnalogCoreV1
@using Shifty.Api.Generated.AnalogCoreV2
@inject IProductService _productService
@inject IVoucherService _voucherService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<MudContainer>
    <MudCard Class="mb-auto" Width="40vw">
        <MudCardContent>
            <MudText Align="Align.Center" Class="mb-n4">Issue Voucher Form</MudText>
            <MudForm @bind-IsValid="@isFormValid" >
                <MudSelect  T="ProductDto" 
                            Label="Product"
                            Placeholder="Available products..."
                            AnchorOrigin="Origin.BottomCenter"
                            ToStringFunc="@converter"
                            Required="true"
                            RequiredError="Product is required"
                            @bind-Value=_voucherForm.Product>

                    @foreach (var product in _products)
                    {
                        <MudSelectItem Value="@product" />
                    }
                </MudSelect>

                <MudNumericField @bind-Value="_voucherForm.Amount"
                                Placeholder="1" 
                                Label="Amount" 
                                Variant="Variant.Text" 
                                Required="true"
                                RequiredError="Product is required" 
                                Min="1"
                                Max="10" />

                <MudTextField T="string"
                    @bind-Value="_voucherForm.Description"
                    Label="Description" 
                    Required="true"
                    RequiredError="Description is required" />
                
                <MudCardActions>
                    <MudButton  Variant="Variant.Filled"
                                Color="Color.Primary"
                                Class="ml-auto"
                                Disabled="@(!isFormValid)"
                                OnClick="@(async () => await IssueVoucher())"
                                EndIcon="@Icons.Material.Filled.Sell">
                        Issue Voucher
                    </MudButton>
                </MudCardActions>
            </MudForm>
            @if (_showProgessBar)
            {
                <MudContainer class="d-flex justify-content-center">
                    <MudProgressCircular hidden="@_showProgessBar" Color="Color.Default" Indeterminate="true" />
                </MudContainer>
            }
            @if (_showResult)
            {
                <MudTextField Text="@_voucherCodes"  
                            @ref="multilineReference"
                            T="string"
                            Adornment="Adornment.End" 
                            Style="border-width: 2px; padding: 4px;" 
                            Outlined="true" 
                            AdornmentIcon="@Icons.Material.Outlined.ContentCopy"
                            OnAdornmentClick="@(async () => await CopyToClipboard())" 
                            Lines="@_vouchers.Count" 
                            ReadOnly=true />
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code
{
    [Parameter]
    public System.Security.Claims.ClaimsPrincipal user { get; set; }
    VoucherForm _voucherForm = new();

    bool isFormValid = false;
    bool _productsLoaded = false;
    bool _showResult = false;
    bool _showProgessBar = false;
    ICollection<ProductDto> _products = new List<ProductDto>();
    ICollection<IssueVoucherResponse> _vouchers;
    private string _voucherCodes;
    private MudTextField<string> multilineReference;


    public class VoucherForm
    {
        [Required]
        public string Description { get; set; }
        public ProductDto Product { get; set; }
        public int Amount { get; set; } = 1;
    }

    protected override async Task OnInitializedAsync()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
        (_productsLoaded, _products) = await _productService.GetProducts();

        if (!_productsLoaded)
        {
            Snackbar.Add("Fatal error loading products", Severity.Error);
            Console.WriteLine("Error happened while loading products...");
        }
    }

    async protected Task CopyToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _voucherCodes);
        Snackbar.Add("Codes copied to clipboard", Severity.Success);
    }

    async private Task IssueVoucher()
    {
        _showResult = false;
        _showProgessBar = true;
        bool success;
        (success, _vouchers) = await _voucherService.IssueVouchers(amount: _voucherForm.Amount, productId: _voucherForm.Product.Id, description: _voucherForm.Description);
        if (success)
        {
            _showProgessBar = false;
            _voucherCodes = string.Join("\n", _vouchers.Select(response => response.VoucherCode));
            _showResult = true;
        }
        else
        {
            _showProgessBar = false;
            _showResult = false;
            Snackbar.Add("Fatal error issuing voucher(s).", Severity.Error);
        }
    }
    
    
    Func<ProductDto,string> converter = p => p != null ? $"{p?.Name} ({p?.NumberOfTickets})" : "";
}