@namespace Components
@using System.ComponentModel.DataAnnotations
@using Shifty.App.Services
@using Shifty.Api.Generated.AnalogCoreV1
@using Shifty.Api.Generated.AnalogCoreV2
@inject IProductService _productService
@inject IVoucherService _voucherService
@inject ISnackbar Snackbar

<MudCard Class="mb-auto" Width="40vw">
    <MudCardContent>
        <MudText Align="Align.Center" Class="mb-n4">Issue Voucher Form</MudText>
        <MudForm>
            <MudSelect  T="ProductDto" 
                        Label="Product"
                        Placeholder="Available products..."
                        AnchorOrigin="Origin.BottomCenter"
                        ToStringFunc="@converter"
                        
                        @bind-Value=_voucherForm.Product>

                @foreach (var product in _products)
                {
                    <MudSelectItem Value="@product" />
                }
            </MudSelect>

            <MudNumericField @bind-Value="_voucherForm.Amount" Placeholder="1" Label="Amount" Variant="Variant.Text" Min="1" Max="10" />

            <MudTextField T="string"
                @bind-Value="_voucherForm.Description"
                Label="Description" />
            
            <MudCardActions>
                <MudButton  Variant="Variant.Filled"
                            Color="Color.Primary"
                            Class="ml-auto"
                            OnClick="@(async () => await IssueVoucher())"
                            EndIcon="@Icons.Material.Filled.Sell">
                    Issue Voucher
                </MudButton>
            </MudCardActions>
        </MudForm>
        @if (_showProgessBar)
        {
            <MudContainer class="d-flex justify-content-center">
                <MudProgressCircular hidden="@_showProgessBar" Color="Color.Default" Indeterminate="true" />
            </MudContainer>
        }
        @if (_showResult)
        {
            <MudPaper Style="border-width: 2px; padding: 4px;" Outlined="true">
                @foreach (var voucher in _vouchers)
                {
                    @voucher.VoucherCode <br />
                }
            </MudPaper>
        }
    </MudCardContent>
</MudCard>

@code
{
    [Parameter]
    public System.Security.Claims.ClaimsPrincipal user { get; set; }
    VoucherForm _voucherForm = new();

    bool _productsLoaded = false;
    bool _showResult = false;
    bool _showProgessBar = false;
    ICollection<ProductDto> _products = new List<ProductDto>();
    ICollection<IssueVoucherResponse> _vouchers;

    public class VoucherForm
    {
        [Required]
        public string Description { get; set; }
        public ProductDto Product { get; set; }
        public int Amount { get; set; } = 1;
    }

    protected override async Task OnInitializedAsync()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
        (_productsLoaded, _products) = await _productService.GetProducts();

        if (!_productsLoaded)
        {
            Snackbar.Add("Fatal error loading products", Severity.Error);
            Console.WriteLine("Error happened while loading products...");
        }

        Console.WriteLine(_products.First<ProductDto>().Name);
    }

    async private Task IssueVoucher()
    {
        _showResult = false;
        _showProgessBar = true;
        bool success;
        (success, _vouchers) = await _voucherService.IssueVouchers(amount: _voucherForm.Amount, productId: _voucherForm.Product.Id, description: _voucherForm.Description);
        if (success)
        {
            _showProgessBar = false;
            _showResult = true;
        }
        else
        {
            _showProgessBar = false;
            _showResult = false;
            Snackbar.Add("Fatal error issuing voucher(s).", Severity.Error);
        }
    }

    Func<ProductDto,string> converter = p => p?.Name;

}