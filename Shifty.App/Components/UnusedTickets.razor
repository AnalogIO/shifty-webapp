@namespace Components
@using System.ComponentModel.DataAnnotations
@using Shifty.App.Services
@using Shifty.Api.Generated.AnalogCoreV1
@using Shifty.Api.Generated.AnalogCoreV2
@using Shifty.App.DomainModels
@using Shifty.App.Shared
@using Shared
@using LanguageExt.UnsafeValueAccess
@using MudExtensions
@inject IUnusedTicketsService _unusedTicketsService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Medium" Style="margin-top: 20px;">
    <MudPaper Style="padding: 10px">
        <MudText Typo="Typo.h6">Unused Tickets</MudText>
        <MudDateRangePicker DateRange="@_queryDateRange" Editable=true DateRangeChanged="LoadUnusedTickets"/>
        <MudLoading @bind-Loading="_loading">
            <LoaderContent>
                <MudContainer Style="width: 100%; display: flex;">
                    <LoadingIndicator Height="400px" />
                </MudContainer>
            </LoaderContent>
            <ChildContent>
        <MudDataGrid
            T="UnusedTicket"
            Items="@Items"
            Height="500px"
            FixedFooter>
                    <Columns>
                        <PropertyColumn Property="x => x.ProductId" Title="Product Id" />
                        <PropertyColumn Property="x => x.ProductName" Title="Product Name" AggregateDefinition="_footerLabel"/>
                        <PropertyColumn Property="x => x.TicketsLeft" Title="Unused Tickets" AggregateDefinition="_ticketsLeftSum" />
                        <PropertyColumn Property="x => x.UnusedPurchasesValue" Title="Unused value (DKK)" AggregateDefinition="_valueLeftSum">
                            <CellTemplate>
                                @context.Item.UnusedPurchasesValue.ToString("0.00")
                            </CellTemplate>
                        </PropertyColumn>
                    </Columns>
                    <NoRecordsContent>No records found for the given time period</NoRecordsContent>
                </MudDataGrid>
            </ChildContent>
        </MudLoading>
    </MudPaper>
</MudContainer>

@code
{
    private IEnumerable<UnusedTicket> Items;
    private bool _loading = false;
    private DateRange _queryDateRange = new(){ Start = new(DateTime.Today.Year, 1, 1), End = new(DateTime.Today.Year, 12, 31)};

    private async Task LoadUnusedTickets(DateRange queryDateRange)
    {
        _loading = true;
        if (queryDateRange.Start is null || queryDateRange.End is null) return;
        
        _queryDateRange = queryDateRange;
        var result = await _unusedTicketsService.GetUnusedTickets(queryDateRange.Start.Value, queryDateRange.End.Value);

        result.Match(
            Succ: res => {
                Items = res;
            },
            Fail: error => {
                Snackbar.Add(error.Message, Severity.Error);
                Items = new List<UnusedTicket>();
            }
        );
        _loading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUnusedTickets(_queryDateRange);
    }

    private AggregateDefinition<UnusedTicket> _ticketsLeftSum = new()
    {
        Type = AggregateType.Sum
    };

    private AggregateDefinition<UnusedTicket> _valueLeftSum = new()
    {
        CustomAggregate = x => {
            var sum = x.Sum(t => t.UnusedPurchasesValue);
            return sum.ToString("0.00");
        },
        Type = AggregateType.Custom,
    };

    private AggregateDefinition<UnusedTicket> _footerLabel = new()
    {
        CustomAggregate = x => "Total",
        Type = AggregateType.Custom,
    };
}