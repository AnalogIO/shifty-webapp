@page "/Login"
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using global::Shifty.Api.Generated.ShiftPlanningV1
@using Shifty.App.Services
@inject IAuthenticationService _authenticationService

<MudCard Class="mb-auto">
    <MudCardContent>
        @if (_loggingIn)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        }
        else
        {
            if (!_successfulLogin)
            {
                <MudAlert Severity="Severity.Warning" ShowCloseIcon="true">Invalid credentials</MudAlert>
            }
            
            <MudForm Model="@_employeeLoginDto" @bind-IsValid="@_validInput">
                <MudTextField T="string"
                              @bind-Value="_employeeLoginDto.Username"
                              Label="Email"
                              Immediate="true"
                              DebounceInterval="500"
                              Required="true"
                              RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() { ErrorMessage = "The e-mail address is invalid" })"/>
                <MudTextField T="string" Label="Password"
                              @bind-Value="_employeeLoginDto.Password"
                              InputType="InputType.Password"
                              Immediate="true"
                              Required="true"
                              RequiredError="Password is required!"/>
            </MudForm>
        }
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   Disabled="@(!_validInput)"
                   Class="ml-auto"
                   OnClick="@(async () => await LoginUser())">
            Login
        </MudButton>
    </MudCardActions>
</MudCard>

@code {
    bool _validInput;
    bool _loggingIn = false;
    bool _successfulLogin = true;
    EmployeeLoginDTO _employeeLoginDto = new();

    async Task LoginUser()
    {
        _successfulLogin = true;
        _loggingIn = true;
        _successfulLogin = await _authenticationService.LoginUser(_employeeLoginDto);
        _loggingIn = false;
    }
}