@page "/Login"
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using Shifty.App.Services
@inject IAuthenticationService _authenticationService

<EditForm Model="@_loginForm" OnValidSubmit="async () =>  await LoginUser()" >
    <DataAnnotationsValidator/>
    <MudCard Class="mb-auto">
        <MudCardContent>
            @if (_loggingIn)
            {
                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            }
            else
            {
                if (!_successfulLogin)
                {
                    <MudAlert Severity="Severity.Warning" ShowCloseIcon="true">Invalid credentials</MudAlert>
                }
                
                <MudTextField T="string"
                              @bind-Value="_loginForm.Email"
                              Label="Email"
                              For="() => _loginForm.Email"
                              Immediate="true"
                              DebounceInterval="500"/>
                <MudTextField T="string" Label="Password"
                              @bind-Value="_loginForm.Password"
                              InputType="InputType.Password"
                              For="() => _loginForm.Password"
                              Immediate="true"/>
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Disabled="@(!ValidateCredentials())"
                       Class="ml-auto"
                       OnClick="@(async () => await LoginUser())">
                Login
            </MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>


@code {
    bool _loggingIn = false;
    bool _successfulLogin = true;
    LoginForm _loginForm = new();
    
    public class LoginForm
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        public string Password { get; set; }
    }

    async Task LoginUser()
    {
        _successfulLogin = true;
        _loggingIn = true;
        _successfulLogin = await _authenticationService.LoginUser(_loginForm.Email, _loginForm.Password);
        _loggingIn = false;
    }

    bool ValidateCredentials()
    {
        return _loginForm.Email != null 
                && _loginForm.Password != null
                && _loginForm.Email.Length > 0
                && _loginForm.Password.Length > 0
                && !_loggingIn;
    }
}