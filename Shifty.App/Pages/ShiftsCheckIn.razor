@page "/ShiftsCheckIn"
@using global::Shifty.Api.Generated.ShiftPlanningV1
@using Shifty.App.Repositories

@inject ISnackbar _snackbar
@inject IShiftRepository _shiftRepository
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
    <MudText Typo="Typo.h3" GutterBottom="true">Shift Check-in</MudText>
    <MudText Class="mb-8">Check-in on a scheduled shift. Only shifts planned for today can be checked in</MudText>

    @if (_shifts == null)
    {
        <LoadingIndicator Height="40vh"></LoadingIndicator>
    }
    else if (_shifts.Any())
    {
        <MudExpansionPanels>
            @foreach (var shiftDto in _shifts)
            {
                <CheckInPanel Shift="shiftDto"></CheckInPanel>
            }
        </MudExpansionPanels>
    }
    else
    {
        <MudText Class="mb-8">No shifts are planned for today</MudText>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary" OnClick="@(async () => await ReloadShifts())">
            Not correct? Retry
        </MudButton>
    }
</MudContainer>


@code {
    private IEnumerable<ShiftDTO> _shifts;

    protected override async Task OnInitializedAsync()
    {
        await ReloadShifts();
    }

    async Task ReloadShifts()
    {
        _shifts = null;
        var either = await _shiftRepository.TodayShifts();
        if (either.IsLeft)
        {
            var errorMessage = either.LeftAsEnumerable().Head.Message;
            _snackbar.Add($"Failed to load today's shifts: {errorMessage}", Severity.Error);
        }
        _shifts = either.Right(_ => _).Left(_ => new List<ShiftDTO>());
    }

}