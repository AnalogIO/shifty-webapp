@using MudBlazor.Extensions
@using global::Shifty.Api.Generated.ShiftPlanningV1
@using Microsoft.IdentityModel.Tokens
@using Shifty.App.Repositories

@inject IShiftRepository _shiftRepository
@inject IEmployeeRepository _employeeRepository
@inject ISnackbar _snackbar

<MudExpansionPanel Text="@(ExpansionPanelTitle())" IsInitiallyExpanded="@IsExpanded">
    <MudGrid Spacing="2" Justify="Justify.Center" VerticalAlign="GridLayoutVerticalAlign.Center">
        @if (ShiftHasEnded)
        {
            <MudItem xs="12">
                <MudAlert Severity="Severity.Warning" Variant="Variant.Filled">You cannot edit a shift which has ended</MudAlert>
            </MudItem>
        }

        @foreach (var employee in Shift.Employees)
        {
            <MudItem xs="7">
                <MudText>@employee.FirstName @employee.LastName</MudText>
                <MudDivider></MudDivider>
            </MudItem>
            <MudItem xs="5">
                <MudSwitch
                    Checked="IsEmployeeCheckedIn(employee)"
                    CheckedChanged="@(async (bool _) => await UpdateCheckInStatus(employee))"
                    Color="Color.Primary"
                    Label="@(IsEmployeeCheckedIn(employee) ? "Checked in" : "Checked out")"
                    Disabled="@(ShiftHasEnded || _employeeCheckInStatus[employee.Id] == CheckInStatus.Updating)"
                    DisableRipple="@(ShiftHasEnded)"/>
            </MudItem>
        }
    </MudGrid>
    <MudItem xs="12" sm="6" md="4">
        <MudAutocomplete T="string" 
                         Label="Want to add someone to the shift?" @bind-Value="_employeeToAdd" 
                         SearchFunc="@GetEmployeeNames" 
                         ShowProgressIndicator="true" 
                         Disabled="@ShiftHasEnded">
            <ProgressIndicatorInPopoverTemplate>
                <MudList Clickable="false">
                    <MudListItem>
                        Loading...
                    </MudListItem>
                </MudList>
            </ProgressIndicatorInPopoverTemplate>
        </MudAutocomplete>
        @if (!_employeeToAdd.IsNullOrEmpty())
        {
            <MudButton Variant="Variant.Filled" OnClick="@(async () => await AddEmployeeToShift())">Add to shift</MudButton>
        }
    </MudItem>
</MudExpansionPanel>

@code {

    [Parameter]
    public ShiftDTO Shift { get; set; }

    private ICollection<EmployeeDTO> _employees;
    private string _employeeToAdd = "";
    private Dictionary<int, CheckInStatus> _employeeCheckInStatus;

    private enum CheckInStatus
    {
        NotCheckedIn,
        Updating,
        CheckedIn
    }

    protected override void OnInitialized()
    {
        _employeeCheckInStatus = new Dictionary<int, CheckInStatus>();

        foreach (var employee in Shift.Employees)
        {
            _employeeCheckInStatus.Add(employee.Id, Shift.CheckIns.Any(c => c.Employee.Id == employee.Id) ? CheckInStatus.CheckedIn : CheckInStatus.NotCheckedIn);
        }
    }

    async Task UpdateCheckInStatus(EmployeeDTO employee)
    {
        var oldStatus = _employeeCheckInStatus[employee.Id];
        _employeeCheckInStatus[employee.Id] = CheckInStatus.Updating;

        var (either, updatedStatus) = oldStatus switch { // Not handling the updating state 
            CheckInStatus.NotCheckedIn => (await _shiftRepository.CheckIn(Shift.Id, employee.Id), CheckInStatus.CheckedIn),
            CheckInStatus.CheckedIn => (await _shiftRepository.CheckOut(Shift.Id, employee.Id), CheckInStatus.NotCheckedIn),
            _ => throw new ArgumentOutOfRangeException()
            };

        either.Match(
            b => _employeeCheckInStatus[employee.Id] = b ? updatedStatus : oldStatus,
            e =>
            {
                _snackbar.Add($"Failed to update {employee.FirstName} {employee.LastName}: {e.Message}", Severity.Error);
                _employeeCheckInStatus[employee.Id] = oldStatus;
            });
    }

    async Task<IEnumerable<string>> GetEmployeeNames(string searchTerm)
    {
        if (_employees.IsNullOrEmpty())
        {
            var either = await _employeeRepository.GetEmployees();

            _employees = either.Match(
                employees => employees,
                error =>
                {
                    _snackbar.Add($"Failed to retrieve employees: {error.Message}", Severity.Error);
                    return new List<EmployeeDTO>();
                });
        }

        return _employees.Select(e => $"{e.FirstName} {e.LastName}").Where(name => name.StartsWith(searchTerm, StringComparison.InvariantCultureIgnoreCase));
    }

    async Task AddEmployeeToShift()
    {
        var employeeIds = Shift.Employees.Select(e => e.Id).ToList();
        var employee = _employees.FirstOrDefault(e => $"{e.FirstName} {e.LastName}" == _employeeToAdd);
        if (employee == null)
        {
            _snackbar.Add($"No employee with name {_employeeToAdd}", Severity.Error);
            return;
        }
        var employeeIdToAdd = employee.Id;
        employeeIds.Add(employeeIdToAdd);

        var patch = new PatchShiftDTO
        {
            EmployeeIds = employeeIds
        };
        var either = await _shiftRepository.AddEmployeeToShift(Shift.Id, patch);
        either.Match(
            r => _snackbar.Add($"Added {_employeeToAdd} to shift", Severity.Success),
            error => _snackbar.Add($"Could not add {_employeeToAdd} to shift: {error.Message}", Severity.Error)
            );
    }

    private string ExpansionPanelTitle()
    {
        var title = Shift.Start.ToString("HH:mm") + " - " + Shift.End.ToString("HH:mm");

        if (ShiftHasEnded) title += " (Ended)";

        return title;
    }

    private bool IsExpanded => Shift.Start.TimeOfDay < DateTime.Now.TimeOfDay && DateTime.Now.TimeOfDay < Shift.End.TimeOfDay;
    private bool ShiftHasEnded => Shift.End.TimeOfDay < DateTime.Now.TimeOfDay;

    private bool IsEmployeeCheckedIn(EmployeeDTO employee) => _employeeCheckInStatus[employee.Id] == CheckInStatus.CheckedIn;

}